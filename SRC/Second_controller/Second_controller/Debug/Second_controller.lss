
Second_controller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ac2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000ac2  00000b56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  00000b58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001062  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000898  00000000  00000000  00001d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b06  00000000  00000000  000025c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000280  00000000  00000000  000030cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000522  00000000  00000000  0000334c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d92  00000000  00000000  0000386e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00004600  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 5f 05 	jmp	0xabe	; 0xabe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include "STD_TYPES.h"
#define  F_CPU 16000000UL
#include "util/delay.h"

int main(void){
    ULTRA_SONIC_INIT_1();
  92:	0e 94 b7 00 	call	0x16e	; 0x16e <ULTRA_SONIC_INIT_1>
    ULTRA_SONIC_INIT_2();
  96:	0e 94 57 01 	call	0x2ae	; 0x2ae <ULTRA_SONIC_INIT_2>
    BUZZER_INIT(BUZZER_0);
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	0e 94 75 00 	call	0xea	; 0xea <BUZZER_INIT>
    u16 reading_1;
    u16 reading_2;
    while(1){
        reading_1 = MEASURE_DISTANCE_1();
  a0:	0e 94 cb 00 	call	0x196	; 0x196 <MEASURE_DISTANCE_1>
  a4:	ec 01       	movw	r28, r24
        reading_2 = MEASURE_DISTANCE_2();
  a6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <MEASURE_DISTANCE_2>
        if(reading_1 < 10 || reading_2 < 10){
  aa:	ca 30       	cpi	r28, 0x0A	; 10
  ac:	d1 05       	cpc	r29, r1
  ae:	18 f0       	brcs	.+6      	; 0xb6 <main+0x24>
  b0:	8a 30       	cpi	r24, 0x0A	; 10
  b2:	91 05       	cpc	r25, r1
  b4:	20 f4       	brcc	.+8      	; 0xbe <main+0x2c>
            BUZZER_NEAR(BUZZER_0);
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	0e 94 81 00 	call	0x102	; 0x102 <BUZZER_NEAR>
  bc:	f1 cf       	rjmp	.-30     	; 0xa0 <main+0xe>
        }else if(reading_1 < 20 || reading_2 < 20){
  be:	c4 31       	cpi	r28, 0x14	; 20
  c0:	d1 05       	cpc	r29, r1
  c2:	18 f0       	brcs	.+6      	; 0xca <main+0x38>
  c4:	84 31       	cpi	r24, 0x14	; 20
  c6:	91 05       	cpc	r25, r1
  c8:	20 f4       	brcc	.+8      	; 0xd2 <main+0x40>
            BUZZER_INTERMEDIATE(BUZZER_0);
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	0e 94 93 00 	call	0x126	; 0x126 <BUZZER_INTERMEDIATE>
  d0:	e7 cf       	rjmp	.-50     	; 0xa0 <main+0xe>
        }else if(reading_1 < 30 || reading_2 < 30){
  d2:	6e 97       	sbiw	r28, 0x1e	; 30
  d4:	10 f0       	brcs	.+4      	; 0xda <main+0x48>
  d6:	4e 97       	sbiw	r24, 0x1e	; 30
  d8:	20 f4       	brcc	.+8      	; 0xe2 <main+0x50>
            BUZZER_FAR(BUZZER_0);
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	0e 94 a5 00 	call	0x14a	; 0x14a <BUZZER_FAR>
  e0:	df cf       	rjmp	.-66     	; 0xa0 <main+0xe>
        }else{
            BUZZER_OFF(BUZZER_0);
  e2:	83 e0       	ldi	r24, 0x03	; 3
  e4:	0e 94 7d 00 	call	0xfa	; 0xfa <BUZZER_OFF>
  e8:	db cf       	rjmp	.-74     	; 0xa0 <main+0xe>

000000ea <BUZZER_INIT>:
#define F_CPU 16000000
#include "util/delay.h"
#include "DIO.h"

void BUZZER_INIT(u8 buzzer_no){
	PIN_MODE(buzzer_no,OUTPUT);
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	0e 94 2c 02 	call	0x458	; 0x458 <PIN_MODE>
  f0:	08 95       	ret

000000f2 <BUZZER_ON>:
}

void BUZZER_ON(u8 buzzer_no){
	PIN_WRITE(buzzer_no,HIGH);
  f2:	61 e0       	ldi	r22, 0x01	; 1
  f4:	0e 94 b8 02 	call	0x570	; 0x570 <PIN_WRITE>
  f8:	08 95       	ret

000000fa <BUZZER_OFF>:
}

void BUZZER_OFF(u8 buzzer_no){
	PIN_WRITE(buzzer_no,LOW);
  fa:	60 e0       	ldi	r22, 0x00	; 0
  fc:	0e 94 b8 02 	call	0x570	; 0x570 <PIN_WRITE>
 100:	08 95       	ret

00000102 <BUZZER_NEAR>:
}

void BUZZER_NEAR(u8 buzzer_no){
 102:	cf 93       	push	r28
 104:	c8 2f       	mov	r28, r24
	BUZZER_ON(buzzer_no);
 106:	0e 94 79 00 	call	0xf2	; 0xf2 <BUZZER_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	2f ef       	ldi	r18, 0xFF	; 255
 10c:	81 ee       	ldi	r24, 0xE1	; 225
 10e:	94 e0       	ldi	r25, 0x04	; 4
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <BUZZER_NEAR+0xe>
 118:	00 c0       	rjmp	.+0      	; 0x11a <BUZZER_NEAR+0x18>
 11a:	00 00       	nop
	_delay_ms(100);
	BUZZER_OFF(buzzer_no);
 11c:	8c 2f       	mov	r24, r28
 11e:	0e 94 7d 00 	call	0xfa	; 0xfa <BUZZER_OFF>
}
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <BUZZER_INTERMEDIATE>:

void BUZZER_INTERMEDIATE(u8 buzzer_no){
 126:	cf 93       	push	r28
 128:	c8 2f       	mov	r28, r24
    BUZZER_ON(buzzer_no);
 12a:	0e 94 79 00 	call	0xf2	; 0xf2 <BUZZER_ON>
 12e:	2f ef       	ldi	r18, 0xFF	; 255
 130:	83 ec       	ldi	r24, 0xC3	; 195
 132:	99 e0       	ldi	r25, 0x09	; 9
 134:	21 50       	subi	r18, 0x01	; 1
 136:	80 40       	sbci	r24, 0x00	; 0
 138:	90 40       	sbci	r25, 0x00	; 0
 13a:	e1 f7       	brne	.-8      	; 0x134 <BUZZER_INTERMEDIATE+0xe>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <BUZZER_INTERMEDIATE+0x18>
 13e:	00 00       	nop
    _delay_ms(200);
    BUZZER_OFF(buzzer_no);
 140:	8c 2f       	mov	r24, r28
 142:	0e 94 7d 00 	call	0xfa	; 0xfa <BUZZER_OFF>
}
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <BUZZER_FAR>:

void BUZZER_FAR(u8 buzzer_no){
 14a:	cf 93       	push	r28
 14c:	c8 2f       	mov	r28, r24
    BUZZER_ON(buzzer_no);
 14e:	0e 94 79 00 	call	0xf2	; 0xf2 <BUZZER_ON>
 152:	2f ef       	ldi	r18, 0xFF	; 255
 154:	85 ea       	ldi	r24, 0xA5	; 165
 156:	9e e0       	ldi	r25, 0x0E	; 14
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <BUZZER_FAR+0xe>
 160:	00 c0       	rjmp	.+0      	; 0x162 <BUZZER_FAR+0x18>
 162:	00 00       	nop
    _delay_ms(300);
    BUZZER_OFF(buzzer_no);
 164:	8c 2f       	mov	r24, r28
 166:	0e 94 7d 00 	call	0xfa	; 0xfa <BUZZER_OFF>
 16a:	cf 91       	pop	r28
 16c:	08 95       	ret

0000016e <ULTRA_SONIC_INIT_1>:
u16 timer_overflow_2 = 0;


void ULTRA_SONIC_INIT_1(void){
    //ENABLE GLOBALE INTERUPT
    SET_BIT(SREG,7);
 16e:	8f b7       	in	r24, 0x3f	; 63
 170:	80 68       	ori	r24, 0x80	; 128
 172:	8f bf       	out	0x3f, r24	; 63
    //TIMER0 OVERFLOW
    SET_BIT(TIMSK,0);
 174:	89 b7       	in	r24, 0x39	; 57
 176:	81 60       	ori	r24, 0x01	; 1
 178:	89 bf       	out	0x39, r24	; 57
    //PIN MODE FOR TRIGGER
    PIN_MODE(TRIGGER_PIN_1,OUTPUT);
 17a:	61 e0       	ldi	r22, 0x01	; 1
 17c:	84 e1       	ldi	r24, 0x14	; 20
 17e:	0e 94 2c 02 	call	0x458	; 0x458 <PIN_MODE>
    //PIN MODE FOR ECHO
    PIN_MODE(ECHO_PIN_1,INPUT);
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	85 e1       	ldi	r24, 0x15	; 21
 186:	0e 94 2c 02 	call	0x458	; 0x458 <PIN_MODE>
    //NORMAL OPERATION FOR ALL
    TCCR0 = 0;
 18a:	13 be       	out	0x33, r1	; 51
    PIN_WRITE(TRIGGER_PIN_1,HIGH);
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	84 e1       	ldi	r24, 0x14	; 20
 190:	0e 94 b8 02 	call	0x570	; 0x570 <PIN_WRITE>
 194:	08 95       	ret

00000196 <MEASURE_DISTANCE_1>:
}

u16 MEASURE_DISTANCE_1(void){
 196:	4f 92       	push	r4
 198:	5f 92       	push	r5
 19a:	6f 92       	push	r6
 19c:	7f 92       	push	r7
 19e:	8f 92       	push	r8
 1a0:	9f 92       	push	r9
 1a2:	af 92       	push	r10
 1a4:	bf 92       	push	r11
 1a6:	cf 92       	push	r12
 1a8:	df 92       	push	r13
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
    u8 entered=0;
    u8 done=0;
    u64 time_taken;
    u32 distance;
    //SEND A ECHO
    PIN_WRITE(TRIGGER_PIN_1,HIGH);
 1b6:	61 e0       	ldi	r22, 0x01	; 1
 1b8:	84 e1       	ldi	r24, 0x14	; 20
 1ba:	0e 94 b8 02 	call	0x570	; 0x570 <PIN_WRITE>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	85 e3       	ldi	r24, 0x35	; 53
 1c0:	8a 95       	dec	r24
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <MEASURE_DISTANCE_1+0x2a>
 1c4:	00 00       	nop
    _delay_us(10);
    PIN_WRITE(TRIGGER_PIN_1,LOW);
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	84 e1       	ldi	r24, 0x14	; 20
 1ca:	0e 94 b8 02 	call	0x570	; 0x570 <PIN_WRITE>
    PIN_WRITE(TRIGGER_PIN_1,HIGH);
}

u16 MEASURE_DISTANCE_1(void){
    u8 entered=0;
    u8 done=0;
 1ce:	c0 e0       	ldi	r28, 0x00	; 0
    TCCR0 = 0;
    PIN_WRITE(TRIGGER_PIN_1,HIGH);
}

u16 MEASURE_DISTANCE_1(void){
    u8 entered=0;
 1d0:	d0 e0       	ldi	r29, 0x00	; 0
    u32 distance;
    //SEND A ECHO
    PIN_WRITE(TRIGGER_PIN_1,HIGH);
    _delay_us(10);
    PIN_WRITE(TRIGGER_PIN_1,LOW);
    while(done != 1){
 1d2:	2e c0       	rjmp	.+92     	; 0x230 <MEASURE_DISTANCE_1+0x9a>
        switch(PIN_READ(ECHO_PIN_1)){
 1d4:	85 e1       	ldi	r24, 0x15	; 21
 1d6:	0e 94 44 03 	call	0x688	; 0x688 <PIN_READ>
 1da:	88 23       	and	r24, r24
 1dc:	19 f0       	breq	.+6      	; 0x1e4 <MEASURE_DISTANCE_1+0x4e>
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	d9 f0       	breq	.+54     	; 0x218 <MEASURE_DISTANCE_1+0x82>
 1e2:	26 c0       	rjmp	.+76     	; 0x230 <MEASURE_DISTANCE_1+0x9a>
            case 0:
            switch(entered){
 1e4:	d1 30       	cpi	r29, 0x01	; 1
 1e6:	21 f5       	brne	.+72     	; 0x230 <MEASURE_DISTANCE_1+0x9a>
                case 0:
                continue;
                break;
                case 1:
                //TIMER STOP
                CLR_BIT(TCCR0,0);
 1e8:	83 b7       	in	r24, 0x33	; 51
 1ea:	8e 7f       	andi	r24, 0xFE	; 254
 1ec:	83 bf       	out	0x33, r24	; 51
                CLR_BIT(TCCR0,1);
 1ee:	83 b7       	in	r24, 0x33	; 51
 1f0:	8d 7f       	andi	r24, 0xFD	; 253
 1f2:	83 bf       	out	0x33, r24	; 51
                CLR_BIT(TCCR0,2);
 1f4:	83 b7       	in	r24, 0x33	; 51
 1f6:	8b 7f       	andi	r24, 0xFB	; 251
 1f8:	83 bf       	out	0x33, r24	; 51
                time_taken = (timer_overflow_1*256) + TCNT0;
 1fa:	10 91 64 00 	lds	r17, 0x0064	; 0x800064 <timer_overflow_1>
 1fe:	00 e0       	ldi	r16, 0x00	; 0
 200:	82 b7       	in	r24, 0x32	; 50
 202:	28 01       	movw	r4, r16
 204:	48 0e       	add	r4, r24
 206:	51 1c       	adc	r5, r1
 208:	61 2c       	mov	r6, r1
 20a:	71 2c       	mov	r7, r1
 20c:	81 2c       	mov	r8, r1
 20e:	91 2c       	mov	r9, r1
 210:	54 01       	movw	r10, r8
                entered=0;
                done=1;
 212:	c1 e0       	ldi	r28, 0x01	; 1
                //TIMER STOP
                CLR_BIT(TCCR0,0);
                CLR_BIT(TCCR0,1);
                CLR_BIT(TCCR0,2);
                time_taken = (timer_overflow_1*256) + TCNT0;
                entered=0;
 214:	d0 e0       	ldi	r29, 0x00	; 0
                done=1;
                break;
 216:	0c c0       	rjmp	.+24     	; 0x230 <MEASURE_DISTANCE_1+0x9a>
            }
            break;
            case 1:
            switch(entered){
 218:	d1 11       	cpse	r29, r1
 21a:	0a c0       	rjmp	.+20     	; 0x230 <MEASURE_DISTANCE_1+0x9a>
                case 0:
                //8 PRE SCALLER
                CLR_BIT(TCCR0,0);
 21c:	83 b7       	in	r24, 0x33	; 51
 21e:	8e 7f       	andi	r24, 0xFE	; 254
 220:	83 bf       	out	0x33, r24	; 51
                SET_BIT(TCCR0,1);
 222:	83 b7       	in	r24, 0x33	; 51
 224:	82 60       	ori	r24, 0x02	; 2
 226:	83 bf       	out	0x33, r24	; 51
                CLR_BIT(TCCR0,2);
 228:	83 b7       	in	r24, 0x33	; 51
 22a:	8b 7f       	andi	r24, 0xFB	; 251
 22c:	83 bf       	out	0x33, r24	; 51
                entered=1;
 22e:	d1 e0       	ldi	r29, 0x01	; 1
    u32 distance;
    //SEND A ECHO
    PIN_WRITE(TRIGGER_PIN_1,HIGH);
    _delay_us(10);
    PIN_WRITE(TRIGGER_PIN_1,LOW);
    while(done != 1){
 230:	c1 30       	cpi	r28, 0x01	; 1
 232:	81 f6       	brne	.-96     	; 0x1d4 <MEASURE_DISTANCE_1+0x3e>
            }
            break;
        }
    }
    //RESET TIMER
    timer_overflow_1 = 0;
 234:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <timer_overflow_1+0x1>
 238:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <timer_overflow_1>
    TCNT0 = 0;
 23c:	12 be       	out	0x32, r1	; 50
    distance = (time_taken * (SOUND_SPEED/(float)2000000))/2;//distance in cm is returned || DIVIDE BY TWO BECAUSE EVERY OSCILATION INCREASE TWO TICKS
 23e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 242:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 246:	80 e0       	ldi	r24, 0x00	; 0
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0e 94 26 04 	call	0x84c	; 0x84c <__floatunsisf>
 24e:	20 e0       	ldi	r18, 0x00	; 0
 250:	34 e2       	ldi	r19, 0x24	; 36
 252:	44 ef       	ldi	r20, 0xF4	; 244
 254:	59 e4       	ldi	r21, 0x49	; 73
 256:	0e 94 85 03 	call	0x70a	; 0x70a <__divsf3>
 25a:	6b 01       	movw	r12, r22
 25c:	7c 01       	movw	r14, r24
 25e:	24 2d       	mov	r18, r4
 260:	35 2d       	mov	r19, r5
 262:	46 2d       	mov	r20, r6
 264:	57 2d       	mov	r21, r7
 266:	68 2d       	mov	r22, r8
 268:	79 2d       	mov	r23, r9
 26a:	8a 2d       	mov	r24, r10
 26c:	9b 2d       	mov	r25, r11
 26e:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__floatundisf>
 272:	a7 01       	movw	r20, r14
 274:	96 01       	movw	r18, r12
 276:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__mulsf3>
 27a:	20 e0       	ldi	r18, 0x00	; 0
 27c:	30 e0       	ldi	r19, 0x00	; 0
 27e:	40 e0       	ldi	r20, 0x00	; 0
 280:	5f e3       	ldi	r21, 0x3F	; 63
 282:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__mulsf3>
 286:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__fixunssfsi>
    return distance;
}
 28a:	cb 01       	movw	r24, r22
 28c:	df 91       	pop	r29
 28e:	cf 91       	pop	r28
 290:	1f 91       	pop	r17
 292:	0f 91       	pop	r16
 294:	ff 90       	pop	r15
 296:	ef 90       	pop	r14
 298:	df 90       	pop	r13
 29a:	cf 90       	pop	r12
 29c:	bf 90       	pop	r11
 29e:	af 90       	pop	r10
 2a0:	9f 90       	pop	r9
 2a2:	8f 90       	pop	r8
 2a4:	7f 90       	pop	r7
 2a6:	6f 90       	pop	r6
 2a8:	5f 90       	pop	r5
 2aa:	4f 90       	pop	r4
 2ac:	08 95       	ret

000002ae <ULTRA_SONIC_INIT_2>:

void ULTRA_SONIC_INIT_2(void){
    //ENABLE GLOBALE INTERUPT
    SET_BIT(SREG,7);
 2ae:	8f b7       	in	r24, 0x3f	; 63
 2b0:	80 68       	ori	r24, 0x80	; 128
 2b2:	8f bf       	out	0x3f, r24	; 63
    //TIMER0 OVERFLOW
    SET_BIT(TIMSK,6);
 2b4:	89 b7       	in	r24, 0x39	; 57
 2b6:	80 64       	ori	r24, 0x40	; 64
 2b8:	89 bf       	out	0x39, r24	; 57
    //PIN MODE FOR TRIGGER
    PIN_MODE(TRIGGER_PIN_2,OUTPUT);
 2ba:	61 e0       	ldi	r22, 0x01	; 1
 2bc:	86 e1       	ldi	r24, 0x16	; 22
 2be:	0e 94 2c 02 	call	0x458	; 0x458 <PIN_MODE>
    //PIN MODE FOR ECHO
    PIN_MODE(ECHO_PIN_2,INPUT);
 2c2:	60 e0       	ldi	r22, 0x00	; 0
 2c4:	87 e1       	ldi	r24, 0x17	; 23
 2c6:	0e 94 2c 02 	call	0x458	; 0x458 <PIN_MODE>
    //NORMAL OPERATION FOR ALL
    TCCR2 = 0;
 2ca:	15 bc       	out	0x25, r1	; 37
    PIN_WRITE(TRIGGER_PIN_2,HIGH);
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	86 e1       	ldi	r24, 0x16	; 22
 2d0:	0e 94 b8 02 	call	0x570	; 0x570 <PIN_WRITE>
 2d4:	08 95       	ret

000002d6 <MEASURE_DISTANCE_2>:
}

u16 MEASURE_DISTANCE_2(void){
 2d6:	4f 92       	push	r4
 2d8:	5f 92       	push	r5
 2da:	6f 92       	push	r6
 2dc:	7f 92       	push	r7
 2de:	8f 92       	push	r8
 2e0:	9f 92       	push	r9
 2e2:	af 92       	push	r10
 2e4:	bf 92       	push	r11
 2e6:	cf 92       	push	r12
 2e8:	df 92       	push	r13
 2ea:	ef 92       	push	r14
 2ec:	ff 92       	push	r15
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
    u8 entered=0;
    u8 done=0;
    u64 time_taken;
    u32 distance;
    //SEND A ECHO
    PIN_WRITE(TRIGGER_PIN_2,HIGH);
 2f6:	61 e0       	ldi	r22, 0x01	; 1
 2f8:	86 e1       	ldi	r24, 0x16	; 22
 2fa:	0e 94 b8 02 	call	0x570	; 0x570 <PIN_WRITE>
 2fe:	85 e3       	ldi	r24, 0x35	; 53
 300:	8a 95       	dec	r24
 302:	f1 f7       	brne	.-4      	; 0x300 <MEASURE_DISTANCE_2+0x2a>
 304:	00 00       	nop
    _delay_us(10);
    PIN_WRITE(TRIGGER_PIN_2,LOW);
 306:	60 e0       	ldi	r22, 0x00	; 0
 308:	86 e1       	ldi	r24, 0x16	; 22
 30a:	0e 94 b8 02 	call	0x570	; 0x570 <PIN_WRITE>
    PIN_WRITE(TRIGGER_PIN_2,HIGH);
}

u16 MEASURE_DISTANCE_2(void){
    u8 entered=0;
    u8 done=0;
 30e:	c0 e0       	ldi	r28, 0x00	; 0
    TCCR2 = 0;
    PIN_WRITE(TRIGGER_PIN_2,HIGH);
}

u16 MEASURE_DISTANCE_2(void){
    u8 entered=0;
 310:	d0 e0       	ldi	r29, 0x00	; 0
    u32 distance;
    //SEND A ECHO
    PIN_WRITE(TRIGGER_PIN_2,HIGH);
    _delay_us(10);
    PIN_WRITE(TRIGGER_PIN_2,LOW);
    while(done != 1){
 312:	35 c0       	rjmp	.+106    	; 0x37e <MEASURE_DISTANCE_2+0xa8>
        switch(PIN_READ(ECHO_PIN_2)){
 314:	87 e1       	ldi	r24, 0x17	; 23
 316:	0e 94 44 03 	call	0x688	; 0x688 <PIN_READ>
 31a:	88 23       	and	r24, r24
 31c:	19 f0       	breq	.+6      	; 0x324 <MEASURE_DISTANCE_2+0x4e>
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	e9 f0       	breq	.+58     	; 0x35c <MEASURE_DISTANCE_2+0x86>
 322:	2b c0       	rjmp	.+86     	; 0x37a <MEASURE_DISTANCE_2+0xa4>
            case 0:
            switch(entered){
 324:	dd 23       	and	r29, r29
 326:	59 f1       	breq	.+86     	; 0x37e <MEASURE_DISTANCE_2+0xa8>
 328:	d1 30       	cpi	r29, 0x01	; 1
 32a:	39 f5       	brne	.+78     	; 0x37a <MEASURE_DISTANCE_2+0xa4>
                case 0:
                continue;
                break;
                case 1:
                //TIMER STOP
                CLR_BIT(TCCR2,0);
 32c:	85 b5       	in	r24, 0x25	; 37
 32e:	8e 7f       	andi	r24, 0xFE	; 254
 330:	85 bd       	out	0x25, r24	; 37
                CLR_BIT(TCCR2,1);
 332:	85 b5       	in	r24, 0x25	; 37
 334:	8d 7f       	andi	r24, 0xFD	; 253
 336:	85 bd       	out	0x25, r24	; 37
                CLR_BIT(TCCR2,2);
 338:	85 b5       	in	r24, 0x25	; 37
 33a:	8b 7f       	andi	r24, 0xFB	; 251
 33c:	85 bd       	out	0x25, r24	; 37
                time_taken = (timer_overflow_2*256) + TCNT2;
 33e:	10 91 62 00 	lds	r17, 0x0062	; 0x800062 <__data_end>
 342:	00 e0       	ldi	r16, 0x00	; 0
 344:	84 b5       	in	r24, 0x24	; 36
 346:	28 01       	movw	r4, r16
 348:	48 0e       	add	r4, r24
 34a:	51 1c       	adc	r5, r1
 34c:	61 2c       	mov	r6, r1
 34e:	71 2c       	mov	r7, r1
 350:	81 2c       	mov	r8, r1
 352:	91 2c       	mov	r9, r1
 354:	54 01       	movw	r10, r8
                entered=0;
                done=1;
 356:	c1 e0       	ldi	r28, 0x01	; 1
                //TIMER STOP
                CLR_BIT(TCCR2,0);
                CLR_BIT(TCCR2,1);
                CLR_BIT(TCCR2,2);
                time_taken = (timer_overflow_2*256) + TCNT2;
                entered=0;
 358:	d0 e0       	ldi	r29, 0x00	; 0
                done=1;
                break;
 35a:	0f c0       	rjmp	.+30     	; 0x37a <MEASURE_DISTANCE_2+0xa4>
            }
            break;
            case 1:
            switch(entered){
 35c:	dd 23       	and	r29, r29
 35e:	19 f0       	breq	.+6      	; 0x366 <MEASURE_DISTANCE_2+0x90>
 360:	d1 30       	cpi	r29, 0x01	; 1
 362:	69 f0       	breq	.+26     	; 0x37e <MEASURE_DISTANCE_2+0xa8>
 364:	0a c0       	rjmp	.+20     	; 0x37a <MEASURE_DISTANCE_2+0xa4>
                case 0:
                //8 PRE SCALLER
                CLR_BIT(TCCR2,0);
 366:	85 b5       	in	r24, 0x25	; 37
 368:	8e 7f       	andi	r24, 0xFE	; 254
 36a:	85 bd       	out	0x25, r24	; 37
                SET_BIT(TCCR2,1);
 36c:	85 b5       	in	r24, 0x25	; 37
 36e:	82 60       	ori	r24, 0x02	; 2
 370:	85 bd       	out	0x25, r24	; 37
                CLR_BIT(TCCR2,2);
 372:	85 b5       	in	r24, 0x25	; 37
 374:	8b 7f       	andi	r24, 0xFB	; 251
 376:	85 bd       	out	0x25, r24	; 37
                entered=1;
 378:	d1 e0       	ldi	r29, 0x01	; 1
                continue;
                break;
            }
            break;
        }
        if(done==1){
 37a:	c1 30       	cpi	r28, 0x01	; 1
 37c:	11 f0       	breq	.+4      	; 0x382 <MEASURE_DISTANCE_2+0xac>
    u32 distance;
    //SEND A ECHO
    PIN_WRITE(TRIGGER_PIN_2,HIGH);
    _delay_us(10);
    PIN_WRITE(TRIGGER_PIN_2,LOW);
    while(done != 1){
 37e:	c1 30       	cpi	r28, 0x01	; 1
 380:	49 f6       	brne	.-110    	; 0x314 <MEASURE_DISTANCE_2+0x3e>
        if(done==1){
            break;
        }
    }
    //RESET TIMER
    timer_overflow_2 = 0;
 382:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 386:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
    TCNT0 = 0;
 38a:	12 be       	out	0x32, r1	; 50
    distance = (time_taken * (SOUND_SPEED/(float)2000000))/2;//distance in cm is returned || DIVIDE BY TWO BECAUSE EVERY OSCILATION INCREASE TWO TICKS
 38c:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 390:	70 91 61 00 	lds	r23, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	0e 94 26 04 	call	0x84c	; 0x84c <__floatunsisf>
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	34 e2       	ldi	r19, 0x24	; 36
 3a0:	44 ef       	ldi	r20, 0xF4	; 244
 3a2:	59 e4       	ldi	r21, 0x49	; 73
 3a4:	0e 94 85 03 	call	0x70a	; 0x70a <__divsf3>
 3a8:	6b 01       	movw	r12, r22
 3aa:	7c 01       	movw	r14, r24
 3ac:	24 2d       	mov	r18, r4
 3ae:	35 2d       	mov	r19, r5
 3b0:	46 2d       	mov	r20, r6
 3b2:	57 2d       	mov	r21, r7
 3b4:	68 2d       	mov	r22, r8
 3b6:	79 2d       	mov	r23, r9
 3b8:	8a 2d       	mov	r24, r10
 3ba:	9b 2d       	mov	r25, r11
 3bc:	0e 94 63 04 	call	0x8c6	; 0x8c6 <__floatundisf>
 3c0:	a7 01       	movw	r20, r14
 3c2:	96 01       	movw	r18, r12
 3c4:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__mulsf3>
 3c8:	20 e0       	ldi	r18, 0x00	; 0
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	5f e3       	ldi	r21, 0x3F	; 63
 3d0:	0e 94 f2 04 	call	0x9e4	; 0x9e4 <__mulsf3>
 3d4:	0e 94 f7 03 	call	0x7ee	; 0x7ee <__fixunssfsi>
    return distance;
}
 3d8:	cb 01       	movw	r24, r22
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	ff 90       	pop	r15
 3e4:	ef 90       	pop	r14
 3e6:	df 90       	pop	r13
 3e8:	cf 90       	pop	r12
 3ea:	bf 90       	pop	r11
 3ec:	af 90       	pop	r10
 3ee:	9f 90       	pop	r9
 3f0:	8f 90       	pop	r8
 3f2:	7f 90       	pop	r7
 3f4:	6f 90       	pop	r6
 3f6:	5f 90       	pop	r5
 3f8:	4f 90       	pop	r4
 3fa:	08 95       	ret

000003fc <__vector_5>:

ISR(TIMER2_OVF_vect){
 3fc:	1f 92       	push	r1
 3fe:	0f 92       	push	r0
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	0f 92       	push	r0
 404:	11 24       	eor	r1, r1
 406:	8f 93       	push	r24
 408:	9f 93       	push	r25
    timer_overflow_2++;
 40a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 40e:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 418:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
}
 41c:	9f 91       	pop	r25
 41e:	8f 91       	pop	r24
 420:	0f 90       	pop	r0
 422:	0f be       	out	0x3f, r0	; 63
 424:	0f 90       	pop	r0
 426:	1f 90       	pop	r1
 428:	18 95       	reti

0000042a <__vector_11>:

ISR(TIMER0_OVF_vect){
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	8f 93       	push	r24
 436:	9f 93       	push	r25
    timer_overflow_1++;
 438:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <timer_overflow_1>
 43c:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <timer_overflow_1+0x1>
 440:	01 96       	adiw	r24, 0x01	; 1
 442:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <timer_overflow_1+0x1>
 446:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <timer_overflow_1>
 44a:	9f 91       	pop	r25
 44c:	8f 91       	pop	r24
 44e:	0f 90       	pop	r0
 450:	0f be       	out	0x3f, r0	; 63
 452:	0f 90       	pop	r0
 454:	1f 90       	pop	r1
 456:	18 95       	reti

00000458 <PIN_MODE>:
#include "DIO.h"
#include "REG.h"
#include "BIT_MATH.h"

void PIN_MODE(u8 x,u8 state){
	u8 pin  = x % 10;
 458:	9d ec       	ldi	r25, 0xCD	; 205
 45a:	89 9f       	mul	r24, r25
 45c:	91 2d       	mov	r25, r1
 45e:	11 24       	eor	r1, r1
 460:	29 2f       	mov	r18, r25
 462:	26 95       	lsr	r18
 464:	26 95       	lsr	r18
 466:	26 95       	lsr	r18
 468:	22 0f       	add	r18, r18
 46a:	32 2f       	mov	r19, r18
 46c:	33 0f       	add	r19, r19
 46e:	33 0f       	add	r19, r19
 470:	23 0f       	add	r18, r19
 472:	82 1b       	sub	r24, r18
 474:	28 2f       	mov	r18, r24
	u8 port = x / 10;
 476:	89 2f       	mov	r24, r25
 478:	86 95       	lsr	r24
 47a:	86 95       	lsr	r24
 47c:	86 95       	lsr	r24
	switch(port){
 47e:	81 30       	cpi	r24, 0x01	; 1
 480:	19 f1       	breq	.+70     	; 0x4c8 <PIN_MODE+0x70>
 482:	30 f0       	brcs	.+12     	; 0x490 <PIN_MODE+0x38>
 484:	82 30       	cpi	r24, 0x02	; 2
 486:	e1 f1       	breq	.+120    	; 0x500 <PIN_MODE+0xa8>
 488:	83 30       	cpi	r24, 0x03	; 3
 48a:	09 f4       	brne	.+2      	; 0x48e <PIN_MODE+0x36>
 48c:	55 c0       	rjmp	.+170    	; 0x538 <PIN_MODE+0xe0>
 48e:	08 95       	ret
		case 0:
		switch(state){
 490:	66 23       	and	r22, r22
 492:	19 f0       	breq	.+6      	; 0x49a <PIN_MODE+0x42>
 494:	61 30       	cpi	r22, 0x01	; 1
 496:	69 f0       	breq	.+26     	; 0x4b2 <PIN_MODE+0x5a>
 498:	08 95       	ret
			case INPUT:
			CLR_BIT(DDRA,pin);
 49a:	3a b3       	in	r19, 0x1a	; 26
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <PIN_MODE+0x4e>
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	2a 95       	dec	r18
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <PIN_MODE+0x4a>
 4aa:	80 95       	com	r24
 4ac:	83 23       	and	r24, r19
 4ae:	8a bb       	out	0x1a, r24	; 26
			break;
 4b0:	08 95       	ret
			case OUTPUT:
			SET_BIT(DDRA,pin);
 4b2:	3a b3       	in	r19, 0x1a	; 26
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <PIN_MODE+0x66>
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	2a 95       	dec	r18
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <PIN_MODE+0x62>
 4c2:	83 2b       	or	r24, r19
 4c4:	8a bb       	out	0x1a, r24	; 26
			break;
 4c6:	08 95       	ret
			default:
			break;
		}
		break;
		case 1:
		switch(state){
 4c8:	66 23       	and	r22, r22
 4ca:	19 f0       	breq	.+6      	; 0x4d2 <PIN_MODE+0x7a>
 4cc:	61 30       	cpi	r22, 0x01	; 1
 4ce:	69 f0       	breq	.+26     	; 0x4ea <PIN_MODE+0x92>
 4d0:	08 95       	ret
			case INPUT:
			CLR_BIT(DDRB,pin);
 4d2:	37 b3       	in	r19, 0x17	; 23
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <PIN_MODE+0x86>
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	2a 95       	dec	r18
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <PIN_MODE+0x82>
 4e2:	80 95       	com	r24
 4e4:	83 23       	and	r24, r19
 4e6:	87 bb       	out	0x17, r24	; 23
			break;
 4e8:	08 95       	ret
			case OUTPUT:
			SET_BIT(DDRB,pin);
 4ea:	37 b3       	in	r19, 0x17	; 23
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <PIN_MODE+0x9e>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	2a 95       	dec	r18
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <PIN_MODE+0x9a>
 4fa:	83 2b       	or	r24, r19
 4fc:	87 bb       	out	0x17, r24	; 23
			break;
 4fe:	08 95       	ret
			default:
			break;
		}
		break;
		case 2:
		switch(state){
 500:	66 23       	and	r22, r22
 502:	19 f0       	breq	.+6      	; 0x50a <PIN_MODE+0xb2>
 504:	61 30       	cpi	r22, 0x01	; 1
 506:	69 f0       	breq	.+26     	; 0x522 <PIN_MODE+0xca>
 508:	08 95       	ret
			case INPUT:
			CLR_BIT(DDRC,pin);
 50a:	34 b3       	in	r19, 0x14	; 20
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 c0       	rjmp	.+4      	; 0x516 <PIN_MODE+0xbe>
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	2a 95       	dec	r18
 518:	e2 f7       	brpl	.-8      	; 0x512 <PIN_MODE+0xba>
 51a:	80 95       	com	r24
 51c:	83 23       	and	r24, r19
 51e:	84 bb       	out	0x14, r24	; 20
			break;
 520:	08 95       	ret
			case OUTPUT:
			SET_BIT(DDRC,pin);
 522:	34 b3       	in	r19, 0x14	; 20
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <PIN_MODE+0xd6>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	2a 95       	dec	r18
 530:	e2 f7       	brpl	.-8      	; 0x52a <PIN_MODE+0xd2>
 532:	83 2b       	or	r24, r19
 534:	84 bb       	out	0x14, r24	; 20
			break;
 536:	08 95       	ret
			default:
			break;
		}
		break;
		case 3:
		switch(state){
 538:	66 23       	and	r22, r22
 53a:	19 f0       	breq	.+6      	; 0x542 <PIN_MODE+0xea>
 53c:	61 30       	cpi	r22, 0x01	; 1
 53e:	69 f0       	breq	.+26     	; 0x55a <PIN_MODE+0x102>
 540:	08 95       	ret
			case INPUT:
			CLR_BIT(DDRD,pin);
 542:	31 b3       	in	r19, 0x11	; 17
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	02 c0       	rjmp	.+4      	; 0x54e <PIN_MODE+0xf6>
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	2a 95       	dec	r18
 550:	e2 f7       	brpl	.-8      	; 0x54a <PIN_MODE+0xf2>
 552:	80 95       	com	r24
 554:	83 23       	and	r24, r19
 556:	81 bb       	out	0x11, r24	; 17
			break;
 558:	08 95       	ret
			case OUTPUT:
			SET_BIT(DDRD,pin);
 55a:	31 b3       	in	r19, 0x11	; 17
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	02 c0       	rjmp	.+4      	; 0x566 <PIN_MODE+0x10e>
 562:	88 0f       	add	r24, r24
 564:	99 1f       	adc	r25, r25
 566:	2a 95       	dec	r18
 568:	e2 f7       	brpl	.-8      	; 0x562 <PIN_MODE+0x10a>
 56a:	83 2b       	or	r24, r19
 56c:	81 bb       	out	0x11, r24	; 17
 56e:	08 95       	ret

00000570 <PIN_WRITE>:
		default:
		break;
	}
}
void PIN_WRITE(u8 x,u8 state){
	u8 pin  = x % 10;
 570:	9d ec       	ldi	r25, 0xCD	; 205
 572:	89 9f       	mul	r24, r25
 574:	91 2d       	mov	r25, r1
 576:	11 24       	eor	r1, r1
 578:	29 2f       	mov	r18, r25
 57a:	26 95       	lsr	r18
 57c:	26 95       	lsr	r18
 57e:	26 95       	lsr	r18
 580:	22 0f       	add	r18, r18
 582:	32 2f       	mov	r19, r18
 584:	33 0f       	add	r19, r19
 586:	33 0f       	add	r19, r19
 588:	23 0f       	add	r18, r19
 58a:	82 1b       	sub	r24, r18
 58c:	28 2f       	mov	r18, r24
	u8 port = x / 10;
 58e:	89 2f       	mov	r24, r25
 590:	86 95       	lsr	r24
 592:	86 95       	lsr	r24
 594:	86 95       	lsr	r24
	switch(port){
 596:	81 30       	cpi	r24, 0x01	; 1
 598:	19 f1       	breq	.+70     	; 0x5e0 <PIN_WRITE+0x70>
 59a:	30 f0       	brcs	.+12     	; 0x5a8 <PIN_WRITE+0x38>
 59c:	82 30       	cpi	r24, 0x02	; 2
 59e:	e1 f1       	breq	.+120    	; 0x618 <PIN_WRITE+0xa8>
 5a0:	83 30       	cpi	r24, 0x03	; 3
 5a2:	09 f4       	brne	.+2      	; 0x5a6 <PIN_WRITE+0x36>
 5a4:	55 c0       	rjmp	.+170    	; 0x650 <PIN_WRITE+0xe0>
 5a6:	08 95       	ret
		case 0:
		switch(state){
 5a8:	66 23       	and	r22, r22
 5aa:	19 f0       	breq	.+6      	; 0x5b2 <PIN_WRITE+0x42>
 5ac:	61 30       	cpi	r22, 0x01	; 1
 5ae:	69 f0       	breq	.+26     	; 0x5ca <PIN_WRITE+0x5a>
 5b0:	08 95       	ret
			case LOW:
			CLR_BIT(PORTA,pin);
 5b2:	3b b3       	in	r19, 0x1b	; 27
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <PIN_WRITE+0x4e>
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	2a 95       	dec	r18
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <PIN_WRITE+0x4a>
 5c2:	80 95       	com	r24
 5c4:	83 23       	and	r24, r19
 5c6:	8b bb       	out	0x1b, r24	; 27
			break;
 5c8:	08 95       	ret
			case HIGH:
			SET_BIT(PORTA,pin);
 5ca:	3b b3       	in	r19, 0x1b	; 27
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <PIN_WRITE+0x66>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	2a 95       	dec	r18
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <PIN_WRITE+0x62>
 5da:	83 2b       	or	r24, r19
 5dc:	8b bb       	out	0x1b, r24	; 27
			break;
 5de:	08 95       	ret
			default:
			break;
		}
		break;
		case 1:
		switch(state){
 5e0:	66 23       	and	r22, r22
 5e2:	19 f0       	breq	.+6      	; 0x5ea <PIN_WRITE+0x7a>
 5e4:	61 30       	cpi	r22, 0x01	; 1
 5e6:	69 f0       	breq	.+26     	; 0x602 <PIN_WRITE+0x92>
 5e8:	08 95       	ret
			case LOW:
			CLR_BIT(PORTB,pin);
 5ea:	38 b3       	in	r19, 0x18	; 24
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <PIN_WRITE+0x86>
 5f2:	88 0f       	add	r24, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	2a 95       	dec	r18
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <PIN_WRITE+0x82>
 5fa:	80 95       	com	r24
 5fc:	83 23       	and	r24, r19
 5fe:	88 bb       	out	0x18, r24	; 24
			break;
 600:	08 95       	ret
			case HIGH:
			SET_BIT(PORTB,pin);
 602:	38 b3       	in	r19, 0x18	; 24
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	02 c0       	rjmp	.+4      	; 0x60e <PIN_WRITE+0x9e>
 60a:	88 0f       	add	r24, r24
 60c:	99 1f       	adc	r25, r25
 60e:	2a 95       	dec	r18
 610:	e2 f7       	brpl	.-8      	; 0x60a <PIN_WRITE+0x9a>
 612:	83 2b       	or	r24, r19
 614:	88 bb       	out	0x18, r24	; 24
			break;
 616:	08 95       	ret
			default:
			break;
		}
		break;
		case 2:
		switch(state){
 618:	66 23       	and	r22, r22
 61a:	19 f0       	breq	.+6      	; 0x622 <PIN_WRITE+0xb2>
 61c:	61 30       	cpi	r22, 0x01	; 1
 61e:	69 f0       	breq	.+26     	; 0x63a <PIN_WRITE+0xca>
 620:	08 95       	ret
			case LOW:
			CLR_BIT(PORTC,pin);
 622:	35 b3       	in	r19, 0x15	; 21
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	02 c0       	rjmp	.+4      	; 0x62e <PIN_WRITE+0xbe>
 62a:	88 0f       	add	r24, r24
 62c:	99 1f       	adc	r25, r25
 62e:	2a 95       	dec	r18
 630:	e2 f7       	brpl	.-8      	; 0x62a <PIN_WRITE+0xba>
 632:	80 95       	com	r24
 634:	83 23       	and	r24, r19
 636:	85 bb       	out	0x15, r24	; 21
			break;
 638:	08 95       	ret
			case HIGH:
			SET_BIT(PORTC,pin);
 63a:	35 b3       	in	r19, 0x15	; 21
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	02 c0       	rjmp	.+4      	; 0x646 <PIN_WRITE+0xd6>
 642:	88 0f       	add	r24, r24
 644:	99 1f       	adc	r25, r25
 646:	2a 95       	dec	r18
 648:	e2 f7       	brpl	.-8      	; 0x642 <PIN_WRITE+0xd2>
 64a:	83 2b       	or	r24, r19
 64c:	85 bb       	out	0x15, r24	; 21
			break;
 64e:	08 95       	ret
			default:
			break;
		}
		break;
		case 3:
		switch(state){
 650:	66 23       	and	r22, r22
 652:	19 f0       	breq	.+6      	; 0x65a <PIN_WRITE+0xea>
 654:	61 30       	cpi	r22, 0x01	; 1
 656:	69 f0       	breq	.+26     	; 0x672 <PIN_WRITE+0x102>
 658:	08 95       	ret
			case LOW:
			CLR_BIT(PORTD,pin);
 65a:	32 b3       	in	r19, 0x12	; 18
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	02 c0       	rjmp	.+4      	; 0x666 <PIN_WRITE+0xf6>
 662:	88 0f       	add	r24, r24
 664:	99 1f       	adc	r25, r25
 666:	2a 95       	dec	r18
 668:	e2 f7       	brpl	.-8      	; 0x662 <PIN_WRITE+0xf2>
 66a:	80 95       	com	r24
 66c:	83 23       	and	r24, r19
 66e:	82 bb       	out	0x12, r24	; 18
			break;
 670:	08 95       	ret
			case HIGH:
			SET_BIT(PORTD,pin);
 672:	32 b3       	in	r19, 0x12	; 18
 674:	81 e0       	ldi	r24, 0x01	; 1
 676:	90 e0       	ldi	r25, 0x00	; 0
 678:	02 c0       	rjmp	.+4      	; 0x67e <PIN_WRITE+0x10e>
 67a:	88 0f       	add	r24, r24
 67c:	99 1f       	adc	r25, r25
 67e:	2a 95       	dec	r18
 680:	e2 f7       	brpl	.-8      	; 0x67a <PIN_WRITE+0x10a>
 682:	83 2b       	or	r24, r19
 684:	82 bb       	out	0x12, r24	; 18
 686:	08 95       	ret

00000688 <PIN_READ>:
		break;
	}
}

u8 PIN_READ(u8 x){
	u8 pin  = x % 10;
 688:	9d ec       	ldi	r25, 0xCD	; 205
 68a:	89 9f       	mul	r24, r25
 68c:	91 2d       	mov	r25, r1
 68e:	11 24       	eor	r1, r1
 690:	29 2f       	mov	r18, r25
 692:	26 95       	lsr	r18
 694:	26 95       	lsr	r18
 696:	26 95       	lsr	r18
 698:	22 0f       	add	r18, r18
 69a:	32 2f       	mov	r19, r18
 69c:	33 0f       	add	r19, r19
 69e:	33 0f       	add	r19, r19
 6a0:	23 0f       	add	r18, r19
 6a2:	82 1b       	sub	r24, r18
 6a4:	28 2f       	mov	r18, r24
	u8 port = x / 10;
 6a6:	89 2f       	mov	r24, r25
 6a8:	86 95       	lsr	r24
 6aa:	86 95       	lsr	r24
 6ac:	86 95       	lsr	r24
	u8 reading = 0;
	switch(port){
 6ae:	81 30       	cpi	r24, 0x01	; 1
 6b0:	79 f0       	breq	.+30     	; 0x6d0 <PIN_READ+0x48>
 6b2:	28 f0       	brcs	.+10     	; 0x6be <PIN_READ+0x36>
 6b4:	82 30       	cpi	r24, 0x02	; 2
 6b6:	a9 f0       	breq	.+42     	; 0x6e2 <PIN_READ+0x5a>
 6b8:	83 30       	cpi	r24, 0x03	; 3
 6ba:	e1 f0       	breq	.+56     	; 0x6f4 <PIN_READ+0x6c>
 6bc:	24 c0       	rjmp	.+72     	; 0x706 <PIN_READ+0x7e>
		case 0:
		reading = GET_BIT(PINA,pin);
 6be:	89 b3       	in	r24, 0x19	; 25
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <PIN_READ+0x40>
 6c4:	95 95       	asr	r25
 6c6:	87 95       	ror	r24
 6c8:	2a 95       	dec	r18
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <PIN_READ+0x3c>
 6cc:	81 70       	andi	r24, 0x01	; 1
		break;
 6ce:	08 95       	ret
		case 1:
		reading = GET_BIT(PINB,pin);
 6d0:	86 b3       	in	r24, 0x16	; 22
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	02 c0       	rjmp	.+4      	; 0x6da <PIN_READ+0x52>
 6d6:	95 95       	asr	r25
 6d8:	87 95       	ror	r24
 6da:	2a 95       	dec	r18
 6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <PIN_READ+0x4e>
 6de:	81 70       	andi	r24, 0x01	; 1
		break;
 6e0:	08 95       	ret
		case 2:
		reading = GET_BIT(PINC,pin);
 6e2:	83 b3       	in	r24, 0x13	; 19
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <PIN_READ+0x64>
 6e8:	95 95       	asr	r25
 6ea:	87 95       	ror	r24
 6ec:	2a 95       	dec	r18
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <PIN_READ+0x60>
 6f0:	81 70       	andi	r24, 0x01	; 1
		break;
 6f2:	08 95       	ret
		case 3:
		reading = GET_BIT(PIND,pin);
 6f4:	80 b3       	in	r24, 0x10	; 16
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	02 c0       	rjmp	.+4      	; 0x6fe <PIN_READ+0x76>
 6fa:	95 95       	asr	r25
 6fc:	87 95       	ror	r24
 6fe:	2a 95       	dec	r18
 700:	e2 f7       	brpl	.-8      	; 0x6fa <PIN_READ+0x72>
 702:	81 70       	andi	r24, 0x01	; 1
		break;
 704:	08 95       	ret
}

u8 PIN_READ(u8 x){
	u8 pin  = x % 10;
	u8 port = x / 10;
	u8 reading = 0;
 706:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return reading;
}
 708:	08 95       	ret

0000070a <__divsf3>:
 70a:	0e 94 99 03 	call	0x732	; 0x732 <__divsf3x>
 70e:	0c 94 b8 04 	jmp	0x970	; 0x970 <__fp_round>
 712:	0e 94 b1 04 	call	0x962	; 0x962 <__fp_pscB>
 716:	58 f0       	brcs	.+22     	; 0x72e <__divsf3+0x24>
 718:	0e 94 aa 04 	call	0x954	; 0x954 <__fp_pscA>
 71c:	40 f0       	brcs	.+16     	; 0x72e <__divsf3+0x24>
 71e:	29 f4       	brne	.+10     	; 0x72a <__divsf3+0x20>
 720:	5f 3f       	cpi	r21, 0xFF	; 255
 722:	29 f0       	breq	.+10     	; 0x72e <__divsf3+0x24>
 724:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_inf>
 728:	51 11       	cpse	r21, r1
 72a:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_szero>
 72e:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__fp_nan>

00000732 <__divsf3x>:
 732:	0e 94 c9 04 	call	0x992	; 0x992 <__fp_split3>
 736:	68 f3       	brcs	.-38     	; 0x712 <__divsf3+0x8>

00000738 <__divsf3_pse>:
 738:	99 23       	and	r25, r25
 73a:	b1 f3       	breq	.-20     	; 0x728 <__divsf3+0x1e>
 73c:	55 23       	and	r21, r21
 73e:	91 f3       	breq	.-28     	; 0x724 <__divsf3+0x1a>
 740:	95 1b       	sub	r25, r21
 742:	55 0b       	sbc	r21, r21
 744:	bb 27       	eor	r27, r27
 746:	aa 27       	eor	r26, r26
 748:	62 17       	cp	r22, r18
 74a:	73 07       	cpc	r23, r19
 74c:	84 07       	cpc	r24, r20
 74e:	38 f0       	brcs	.+14     	; 0x75e <__divsf3_pse+0x26>
 750:	9f 5f       	subi	r25, 0xFF	; 255
 752:	5f 4f       	sbci	r21, 0xFF	; 255
 754:	22 0f       	add	r18, r18
 756:	33 1f       	adc	r19, r19
 758:	44 1f       	adc	r20, r20
 75a:	aa 1f       	adc	r26, r26
 75c:	a9 f3       	breq	.-22     	; 0x748 <__divsf3_pse+0x10>
 75e:	35 d0       	rcall	.+106    	; 0x7ca <__divsf3_pse+0x92>
 760:	0e 2e       	mov	r0, r30
 762:	3a f0       	brmi	.+14     	; 0x772 <__divsf3_pse+0x3a>
 764:	e0 e8       	ldi	r30, 0x80	; 128
 766:	32 d0       	rcall	.+100    	; 0x7cc <__divsf3_pse+0x94>
 768:	91 50       	subi	r25, 0x01	; 1
 76a:	50 40       	sbci	r21, 0x00	; 0
 76c:	e6 95       	lsr	r30
 76e:	00 1c       	adc	r0, r0
 770:	ca f7       	brpl	.-14     	; 0x764 <__divsf3_pse+0x2c>
 772:	2b d0       	rcall	.+86     	; 0x7ca <__divsf3_pse+0x92>
 774:	fe 2f       	mov	r31, r30
 776:	29 d0       	rcall	.+82     	; 0x7ca <__divsf3_pse+0x92>
 778:	66 0f       	add	r22, r22
 77a:	77 1f       	adc	r23, r23
 77c:	88 1f       	adc	r24, r24
 77e:	bb 1f       	adc	r27, r27
 780:	26 17       	cp	r18, r22
 782:	37 07       	cpc	r19, r23
 784:	48 07       	cpc	r20, r24
 786:	ab 07       	cpc	r26, r27
 788:	b0 e8       	ldi	r27, 0x80	; 128
 78a:	09 f0       	breq	.+2      	; 0x78e <__divsf3_pse+0x56>
 78c:	bb 0b       	sbc	r27, r27
 78e:	80 2d       	mov	r24, r0
 790:	bf 01       	movw	r22, r30
 792:	ff 27       	eor	r31, r31
 794:	93 58       	subi	r25, 0x83	; 131
 796:	5f 4f       	sbci	r21, 0xFF	; 255
 798:	3a f0       	brmi	.+14     	; 0x7a8 <__divsf3_pse+0x70>
 79a:	9e 3f       	cpi	r25, 0xFE	; 254
 79c:	51 05       	cpc	r21, r1
 79e:	78 f0       	brcs	.+30     	; 0x7be <__divsf3_pse+0x86>
 7a0:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_inf>
 7a4:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_szero>
 7a8:	5f 3f       	cpi	r21, 0xFF	; 255
 7aa:	e4 f3       	brlt	.-8      	; 0x7a4 <__divsf3_pse+0x6c>
 7ac:	98 3e       	cpi	r25, 0xE8	; 232
 7ae:	d4 f3       	brlt	.-12     	; 0x7a4 <__divsf3_pse+0x6c>
 7b0:	86 95       	lsr	r24
 7b2:	77 95       	ror	r23
 7b4:	67 95       	ror	r22
 7b6:	b7 95       	ror	r27
 7b8:	f7 95       	ror	r31
 7ba:	9f 5f       	subi	r25, 0xFF	; 255
 7bc:	c9 f7       	brne	.-14     	; 0x7b0 <__divsf3_pse+0x78>
 7be:	88 0f       	add	r24, r24
 7c0:	91 1d       	adc	r25, r1
 7c2:	96 95       	lsr	r25
 7c4:	87 95       	ror	r24
 7c6:	97 f9       	bld	r25, 7
 7c8:	08 95       	ret
 7ca:	e1 e0       	ldi	r30, 0x01	; 1
 7cc:	66 0f       	add	r22, r22
 7ce:	77 1f       	adc	r23, r23
 7d0:	88 1f       	adc	r24, r24
 7d2:	bb 1f       	adc	r27, r27
 7d4:	62 17       	cp	r22, r18
 7d6:	73 07       	cpc	r23, r19
 7d8:	84 07       	cpc	r24, r20
 7da:	ba 07       	cpc	r27, r26
 7dc:	20 f0       	brcs	.+8      	; 0x7e6 <__divsf3_pse+0xae>
 7de:	62 1b       	sub	r22, r18
 7e0:	73 0b       	sbc	r23, r19
 7e2:	84 0b       	sbc	r24, r20
 7e4:	ba 0b       	sbc	r27, r26
 7e6:	ee 1f       	adc	r30, r30
 7e8:	88 f7       	brcc	.-30     	; 0x7cc <__divsf3_pse+0x94>
 7ea:	e0 95       	com	r30
 7ec:	08 95       	ret

000007ee <__fixunssfsi>:
 7ee:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <__fp_splitA>
 7f2:	88 f0       	brcs	.+34     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 7f4:	9f 57       	subi	r25, 0x7F	; 127
 7f6:	98 f0       	brcs	.+38     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 7f8:	b9 2f       	mov	r27, r25
 7fa:	99 27       	eor	r25, r25
 7fc:	b7 51       	subi	r27, 0x17	; 23
 7fe:	b0 f0       	brcs	.+44     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 800:	e1 f0       	breq	.+56     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 802:	66 0f       	add	r22, r22
 804:	77 1f       	adc	r23, r23
 806:	88 1f       	adc	r24, r24
 808:	99 1f       	adc	r25, r25
 80a:	1a f0       	brmi	.+6      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
 80c:	ba 95       	dec	r27
 80e:	c9 f7       	brne	.-14     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 810:	14 c0       	rjmp	.+40     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 812:	b1 30       	cpi	r27, 0x01	; 1
 814:	91 f0       	breq	.+36     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 816:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <__fp_zero>
 81a:	b1 e0       	ldi	r27, 0x01	; 1
 81c:	08 95       	ret
 81e:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_zero>
 822:	67 2f       	mov	r22, r23
 824:	78 2f       	mov	r23, r24
 826:	88 27       	eor	r24, r24
 828:	b8 5f       	subi	r27, 0xF8	; 248
 82a:	39 f0       	breq	.+14     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 82c:	b9 3f       	cpi	r27, 0xF9	; 249
 82e:	cc f3       	brlt	.-14     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 830:	86 95       	lsr	r24
 832:	77 95       	ror	r23
 834:	67 95       	ror	r22
 836:	b3 95       	inc	r27
 838:	d9 f7       	brne	.-10     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 83a:	3e f4       	brtc	.+14     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 83c:	90 95       	com	r25
 83e:	80 95       	com	r24
 840:	70 95       	com	r23
 842:	61 95       	neg	r22
 844:	7f 4f       	sbci	r23, 0xFF	; 255
 846:	8f 4f       	sbci	r24, 0xFF	; 255
 848:	9f 4f       	sbci	r25, 0xFF	; 255
 84a:	08 95       	ret

0000084c <__floatunsisf>:
 84c:	e8 94       	clt
 84e:	09 c0       	rjmp	.+18     	; 0x862 <__stack+0x3>

00000850 <__floatsisf>:
 850:	97 fb       	bst	r25, 7
 852:	3e f4       	brtc	.+14     	; 0x862 <__stack+0x3>
 854:	90 95       	com	r25
 856:	80 95       	com	r24
 858:	70 95       	com	r23
 85a:	61 95       	neg	r22
 85c:	7f 4f       	sbci	r23, 0xFF	; 255
 85e:	8f 4f       	sbci	r24, 0xFF	; 255
 860:	9f 4f       	sbci	r25, 0xFF	; 255
 862:	99 23       	and	r25, r25
 864:	a9 f0       	breq	.+42     	; 0x890 <__stack+0x31>
 866:	f9 2f       	mov	r31, r25
 868:	96 e9       	ldi	r25, 0x96	; 150
 86a:	bb 27       	eor	r27, r27
 86c:	93 95       	inc	r25
 86e:	f6 95       	lsr	r31
 870:	87 95       	ror	r24
 872:	77 95       	ror	r23
 874:	67 95       	ror	r22
 876:	b7 95       	ror	r27
 878:	f1 11       	cpse	r31, r1
 87a:	f8 cf       	rjmp	.-16     	; 0x86c <__stack+0xd>
 87c:	fa f4       	brpl	.+62     	; 0x8bc <__stack+0x5d>
 87e:	bb 0f       	add	r27, r27
 880:	11 f4       	brne	.+4      	; 0x886 <__stack+0x27>
 882:	60 ff       	sbrs	r22, 0
 884:	1b c0       	rjmp	.+54     	; 0x8bc <__stack+0x5d>
 886:	6f 5f       	subi	r22, 0xFF	; 255
 888:	7f 4f       	sbci	r23, 0xFF	; 255
 88a:	8f 4f       	sbci	r24, 0xFF	; 255
 88c:	9f 4f       	sbci	r25, 0xFF	; 255
 88e:	16 c0       	rjmp	.+44     	; 0x8bc <__stack+0x5d>
 890:	88 23       	and	r24, r24
 892:	11 f0       	breq	.+4      	; 0x898 <__stack+0x39>
 894:	96 e9       	ldi	r25, 0x96	; 150
 896:	11 c0       	rjmp	.+34     	; 0x8ba <__stack+0x5b>
 898:	77 23       	and	r23, r23
 89a:	21 f0       	breq	.+8      	; 0x8a4 <__stack+0x45>
 89c:	9e e8       	ldi	r25, 0x8E	; 142
 89e:	87 2f       	mov	r24, r23
 8a0:	76 2f       	mov	r23, r22
 8a2:	05 c0       	rjmp	.+10     	; 0x8ae <__stack+0x4f>
 8a4:	66 23       	and	r22, r22
 8a6:	71 f0       	breq	.+28     	; 0x8c4 <__stack+0x65>
 8a8:	96 e8       	ldi	r25, 0x86	; 134
 8aa:	86 2f       	mov	r24, r22
 8ac:	70 e0       	ldi	r23, 0x00	; 0
 8ae:	60 e0       	ldi	r22, 0x00	; 0
 8b0:	2a f0       	brmi	.+10     	; 0x8bc <__stack+0x5d>
 8b2:	9a 95       	dec	r25
 8b4:	66 0f       	add	r22, r22
 8b6:	77 1f       	adc	r23, r23
 8b8:	88 1f       	adc	r24, r24
 8ba:	da f7       	brpl	.-10     	; 0x8b2 <__stack+0x53>
 8bc:	88 0f       	add	r24, r24
 8be:	96 95       	lsr	r25
 8c0:	87 95       	ror	r24
 8c2:	97 f9       	bld	r25, 7
 8c4:	08 95       	ret

000008c6 <__floatundisf>:
 8c6:	e8 94       	clt

000008c8 <__fp_di2sf>:
 8c8:	f9 2f       	mov	r31, r25
 8ca:	96 eb       	ldi	r25, 0xB6	; 182
 8cc:	ff 23       	and	r31, r31
 8ce:	81 f0       	breq	.+32     	; 0x8f0 <__fp_di2sf+0x28>
 8d0:	12 16       	cp	r1, r18
 8d2:	13 06       	cpc	r1, r19
 8d4:	14 06       	cpc	r1, r20
 8d6:	44 0b       	sbc	r20, r20
 8d8:	93 95       	inc	r25
 8da:	f6 95       	lsr	r31
 8dc:	87 95       	ror	r24
 8de:	77 95       	ror	r23
 8e0:	67 95       	ror	r22
 8e2:	57 95       	ror	r21
 8e4:	40 40       	sbci	r20, 0x00	; 0
 8e6:	ff 23       	and	r31, r31
 8e8:	b9 f7       	brne	.-18     	; 0x8d8 <__fp_di2sf+0x10>
 8ea:	1b c0       	rjmp	.+54     	; 0x922 <__fp_di2sf+0x5a>
 8ec:	99 27       	eor	r25, r25
 8ee:	08 95       	ret
 8f0:	88 23       	and	r24, r24
 8f2:	51 f4       	brne	.+20     	; 0x908 <__fp_di2sf+0x40>
 8f4:	98 50       	subi	r25, 0x08	; 8
 8f6:	d2 f7       	brpl	.-12     	; 0x8ec <__fp_di2sf+0x24>
 8f8:	87 2b       	or	r24, r23
 8fa:	76 2f       	mov	r23, r22
 8fc:	65 2f       	mov	r22, r21
 8fe:	54 2f       	mov	r21, r20
 900:	43 2f       	mov	r20, r19
 902:	32 2f       	mov	r19, r18
 904:	20 e0       	ldi	r18, 0x00	; 0
 906:	b1 f3       	breq	.-20     	; 0x8f4 <__fp_di2sf+0x2c>
 908:	12 16       	cp	r1, r18
 90a:	13 06       	cpc	r1, r19
 90c:	14 06       	cpc	r1, r20
 90e:	44 0b       	sbc	r20, r20
 910:	88 23       	and	r24, r24
 912:	3a f0       	brmi	.+14     	; 0x922 <__fp_di2sf+0x5a>
 914:	9a 95       	dec	r25
 916:	44 0f       	add	r20, r20
 918:	55 1f       	adc	r21, r21
 91a:	66 1f       	adc	r22, r22
 91c:	77 1f       	adc	r23, r23
 91e:	88 1f       	adc	r24, r24
 920:	ca f7       	brpl	.-14     	; 0x914 <__fp_di2sf+0x4c>
 922:	55 23       	and	r21, r21
 924:	4a f4       	brpl	.+18     	; 0x938 <__fp_di2sf+0x70>
 926:	44 0f       	add	r20, r20
 928:	55 1f       	adc	r21, r21
 92a:	11 f4       	brne	.+4      	; 0x930 <__fp_di2sf+0x68>
 92c:	60 ff       	sbrs	r22, 0
 92e:	04 c0       	rjmp	.+8      	; 0x938 <__fp_di2sf+0x70>
 930:	6f 5f       	subi	r22, 0xFF	; 255
 932:	7f 4f       	sbci	r23, 0xFF	; 255
 934:	8f 4f       	sbci	r24, 0xFF	; 255
 936:	9f 4f       	sbci	r25, 0xFF	; 255
 938:	88 0f       	add	r24, r24
 93a:	96 95       	lsr	r25
 93c:	87 95       	ror	r24
 93e:	97 f9       	bld	r25, 7
 940:	08 95       	ret

00000942 <__fp_inf>:
 942:	97 f9       	bld	r25, 7
 944:	9f 67       	ori	r25, 0x7F	; 127
 946:	80 e8       	ldi	r24, 0x80	; 128
 948:	70 e0       	ldi	r23, 0x00	; 0
 94a:	60 e0       	ldi	r22, 0x00	; 0
 94c:	08 95       	ret

0000094e <__fp_nan>:
 94e:	9f ef       	ldi	r25, 0xFF	; 255
 950:	80 ec       	ldi	r24, 0xC0	; 192
 952:	08 95       	ret

00000954 <__fp_pscA>:
 954:	00 24       	eor	r0, r0
 956:	0a 94       	dec	r0
 958:	16 16       	cp	r1, r22
 95a:	17 06       	cpc	r1, r23
 95c:	18 06       	cpc	r1, r24
 95e:	09 06       	cpc	r0, r25
 960:	08 95       	ret

00000962 <__fp_pscB>:
 962:	00 24       	eor	r0, r0
 964:	0a 94       	dec	r0
 966:	12 16       	cp	r1, r18
 968:	13 06       	cpc	r1, r19
 96a:	14 06       	cpc	r1, r20
 96c:	05 06       	cpc	r0, r21
 96e:	08 95       	ret

00000970 <__fp_round>:
 970:	09 2e       	mov	r0, r25
 972:	03 94       	inc	r0
 974:	00 0c       	add	r0, r0
 976:	11 f4       	brne	.+4      	; 0x97c <__fp_round+0xc>
 978:	88 23       	and	r24, r24
 97a:	52 f0       	brmi	.+20     	; 0x990 <__fp_round+0x20>
 97c:	bb 0f       	add	r27, r27
 97e:	40 f4       	brcc	.+16     	; 0x990 <__fp_round+0x20>
 980:	bf 2b       	or	r27, r31
 982:	11 f4       	brne	.+4      	; 0x988 <__fp_round+0x18>
 984:	60 ff       	sbrs	r22, 0
 986:	04 c0       	rjmp	.+8      	; 0x990 <__fp_round+0x20>
 988:	6f 5f       	subi	r22, 0xFF	; 255
 98a:	7f 4f       	sbci	r23, 0xFF	; 255
 98c:	8f 4f       	sbci	r24, 0xFF	; 255
 98e:	9f 4f       	sbci	r25, 0xFF	; 255
 990:	08 95       	ret

00000992 <__fp_split3>:
 992:	57 fd       	sbrc	r21, 7
 994:	90 58       	subi	r25, 0x80	; 128
 996:	44 0f       	add	r20, r20
 998:	55 1f       	adc	r21, r21
 99a:	59 f0       	breq	.+22     	; 0x9b2 <__fp_splitA+0x10>
 99c:	5f 3f       	cpi	r21, 0xFF	; 255
 99e:	71 f0       	breq	.+28     	; 0x9bc <__fp_splitA+0x1a>
 9a0:	47 95       	ror	r20

000009a2 <__fp_splitA>:
 9a2:	88 0f       	add	r24, r24
 9a4:	97 fb       	bst	r25, 7
 9a6:	99 1f       	adc	r25, r25
 9a8:	61 f0       	breq	.+24     	; 0x9c2 <__fp_splitA+0x20>
 9aa:	9f 3f       	cpi	r25, 0xFF	; 255
 9ac:	79 f0       	breq	.+30     	; 0x9cc <__fp_splitA+0x2a>
 9ae:	87 95       	ror	r24
 9b0:	08 95       	ret
 9b2:	12 16       	cp	r1, r18
 9b4:	13 06       	cpc	r1, r19
 9b6:	14 06       	cpc	r1, r20
 9b8:	55 1f       	adc	r21, r21
 9ba:	f2 cf       	rjmp	.-28     	; 0x9a0 <__fp_split3+0xe>
 9bc:	46 95       	lsr	r20
 9be:	f1 df       	rcall	.-30     	; 0x9a2 <__fp_splitA>
 9c0:	08 c0       	rjmp	.+16     	; 0x9d2 <__fp_splitA+0x30>
 9c2:	16 16       	cp	r1, r22
 9c4:	17 06       	cpc	r1, r23
 9c6:	18 06       	cpc	r1, r24
 9c8:	99 1f       	adc	r25, r25
 9ca:	f1 cf       	rjmp	.-30     	; 0x9ae <__fp_splitA+0xc>
 9cc:	86 95       	lsr	r24
 9ce:	71 05       	cpc	r23, r1
 9d0:	61 05       	cpc	r22, r1
 9d2:	08 94       	sec
 9d4:	08 95       	ret

000009d6 <__fp_zero>:
 9d6:	e8 94       	clt

000009d8 <__fp_szero>:
 9d8:	bb 27       	eor	r27, r27
 9da:	66 27       	eor	r22, r22
 9dc:	77 27       	eor	r23, r23
 9de:	cb 01       	movw	r24, r22
 9e0:	97 f9       	bld	r25, 7
 9e2:	08 95       	ret

000009e4 <__mulsf3>:
 9e4:	0e 94 05 05 	call	0xa0a	; 0xa0a <__mulsf3x>
 9e8:	0c 94 b8 04 	jmp	0x970	; 0x970 <__fp_round>
 9ec:	0e 94 aa 04 	call	0x954	; 0x954 <__fp_pscA>
 9f0:	38 f0       	brcs	.+14     	; 0xa00 <__mulsf3+0x1c>
 9f2:	0e 94 b1 04 	call	0x962	; 0x962 <__fp_pscB>
 9f6:	20 f0       	brcs	.+8      	; 0xa00 <__mulsf3+0x1c>
 9f8:	95 23       	and	r25, r21
 9fa:	11 f0       	breq	.+4      	; 0xa00 <__mulsf3+0x1c>
 9fc:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_inf>
 a00:	0c 94 a7 04 	jmp	0x94e	; 0x94e <__fp_nan>
 a04:	11 24       	eor	r1, r1
 a06:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_szero>

00000a0a <__mulsf3x>:
 a0a:	0e 94 c9 04 	call	0x992	; 0x992 <__fp_split3>
 a0e:	70 f3       	brcs	.-36     	; 0x9ec <__mulsf3+0x8>

00000a10 <__mulsf3_pse>:
 a10:	95 9f       	mul	r25, r21
 a12:	c1 f3       	breq	.-16     	; 0xa04 <__mulsf3+0x20>
 a14:	95 0f       	add	r25, r21
 a16:	50 e0       	ldi	r21, 0x00	; 0
 a18:	55 1f       	adc	r21, r21
 a1a:	62 9f       	mul	r22, r18
 a1c:	f0 01       	movw	r30, r0
 a1e:	72 9f       	mul	r23, r18
 a20:	bb 27       	eor	r27, r27
 a22:	f0 0d       	add	r31, r0
 a24:	b1 1d       	adc	r27, r1
 a26:	63 9f       	mul	r22, r19
 a28:	aa 27       	eor	r26, r26
 a2a:	f0 0d       	add	r31, r0
 a2c:	b1 1d       	adc	r27, r1
 a2e:	aa 1f       	adc	r26, r26
 a30:	64 9f       	mul	r22, r20
 a32:	66 27       	eor	r22, r22
 a34:	b0 0d       	add	r27, r0
 a36:	a1 1d       	adc	r26, r1
 a38:	66 1f       	adc	r22, r22
 a3a:	82 9f       	mul	r24, r18
 a3c:	22 27       	eor	r18, r18
 a3e:	b0 0d       	add	r27, r0
 a40:	a1 1d       	adc	r26, r1
 a42:	62 1f       	adc	r22, r18
 a44:	73 9f       	mul	r23, r19
 a46:	b0 0d       	add	r27, r0
 a48:	a1 1d       	adc	r26, r1
 a4a:	62 1f       	adc	r22, r18
 a4c:	83 9f       	mul	r24, r19
 a4e:	a0 0d       	add	r26, r0
 a50:	61 1d       	adc	r22, r1
 a52:	22 1f       	adc	r18, r18
 a54:	74 9f       	mul	r23, r20
 a56:	33 27       	eor	r19, r19
 a58:	a0 0d       	add	r26, r0
 a5a:	61 1d       	adc	r22, r1
 a5c:	23 1f       	adc	r18, r19
 a5e:	84 9f       	mul	r24, r20
 a60:	60 0d       	add	r22, r0
 a62:	21 1d       	adc	r18, r1
 a64:	82 2f       	mov	r24, r18
 a66:	76 2f       	mov	r23, r22
 a68:	6a 2f       	mov	r22, r26
 a6a:	11 24       	eor	r1, r1
 a6c:	9f 57       	subi	r25, 0x7F	; 127
 a6e:	50 40       	sbci	r21, 0x00	; 0
 a70:	9a f0       	brmi	.+38     	; 0xa98 <__mulsf3_pse+0x88>
 a72:	f1 f0       	breq	.+60     	; 0xab0 <__mulsf3_pse+0xa0>
 a74:	88 23       	and	r24, r24
 a76:	4a f0       	brmi	.+18     	; 0xa8a <__mulsf3_pse+0x7a>
 a78:	ee 0f       	add	r30, r30
 a7a:	ff 1f       	adc	r31, r31
 a7c:	bb 1f       	adc	r27, r27
 a7e:	66 1f       	adc	r22, r22
 a80:	77 1f       	adc	r23, r23
 a82:	88 1f       	adc	r24, r24
 a84:	91 50       	subi	r25, 0x01	; 1
 a86:	50 40       	sbci	r21, 0x00	; 0
 a88:	a9 f7       	brne	.-22     	; 0xa74 <__mulsf3_pse+0x64>
 a8a:	9e 3f       	cpi	r25, 0xFE	; 254
 a8c:	51 05       	cpc	r21, r1
 a8e:	80 f0       	brcs	.+32     	; 0xab0 <__mulsf3_pse+0xa0>
 a90:	0c 94 a1 04 	jmp	0x942	; 0x942 <__fp_inf>
 a94:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_szero>
 a98:	5f 3f       	cpi	r21, 0xFF	; 255
 a9a:	e4 f3       	brlt	.-8      	; 0xa94 <__mulsf3_pse+0x84>
 a9c:	98 3e       	cpi	r25, 0xE8	; 232
 a9e:	d4 f3       	brlt	.-12     	; 0xa94 <__mulsf3_pse+0x84>
 aa0:	86 95       	lsr	r24
 aa2:	77 95       	ror	r23
 aa4:	67 95       	ror	r22
 aa6:	b7 95       	ror	r27
 aa8:	f7 95       	ror	r31
 aaa:	e7 95       	ror	r30
 aac:	9f 5f       	subi	r25, 0xFF	; 255
 aae:	c1 f7       	brne	.-16     	; 0xaa0 <__mulsf3_pse+0x90>
 ab0:	fe 2b       	or	r31, r30
 ab2:	88 0f       	add	r24, r24
 ab4:	91 1d       	adc	r25, r1
 ab6:	96 95       	lsr	r25
 ab8:	87 95       	ror	r24
 aba:	97 f9       	bld	r25, 7
 abc:	08 95       	ret

00000abe <_exit>:
 abe:	f8 94       	cli

00000ac0 <__stop_program>:
 ac0:	ff cf       	rjmp	.-2      	; 0xac0 <__stop_program>
